<% title @post.title %>

<div class="hrecipe">
  <h1><%= @post.title %></h1>
  <div class="subheadline">
    <span class="published"><%= @post.created_at.strftime('%B %d, %Y') %></span>
    | <a href="#comments"><%= @post.comments.length %> Comments</a>
  </div>

  <ul class="categories">
    <% @post.categories.each do |category| %>
      <li><%= link_to category, "/archive/#{category.name}", :title => "Recipes for #{category.name.titleize}", :rel => "tag" %></li>
    <% end %>
  </ul>

  <%= image_tag @post.image.url, :class => "headline photo" %>

  <div class="post-content">
    <%= @post.content.html_safe %>
  </div>

  <% if @post.kind == 'recipe' && @post.recipes.present? %>
    <% @post.recipes.each do |recipe| %>
      <div class="recipe">
        <h2 class="fn"><%= recipe.title %></h2>
        <p class="stats"><%= recipe.stats.html_safe %></p>
        <h3>Ingredients</h3>
        <ul>
          <% recipe.ingredients.each_line do |ingredient| %>
            <% if ingredient.present? %>
              <li><span class="ingredient"><%= ingredient %></span></li>
            <% end %>
          <% end %>
        </ul>

        <h3>Directions</h3>
        <div class="instructions">
          <ol>
            <% recipe.directions.each_line do |direction| %>
              <% if direction.present? %>
                <li><%= direction %></li>
              <% end %>
            <% end %>
          </ol>
        </div>

      </div>
    <% end %>
  <% end %>

  <h2>Comments</h2>

  <div id="comments">
    <% @post.comments.each_with_index do |comment, id| %>
      <%= render :partial => 'comments/show', :locals => { :comment => comment, :id => id } %>
    <% end %>
  </div>

  <div id="comment-form">
    <%= form_for [@post, @comment], :remote => true, :html => { :id => 'create-comment-form' } do |f| %>
      <div class="validation-error"></div>

      <div class="row">
        <div class="four columns">
          <%= f.text_field :name %>
        </div>
        <div class="eight columns">
          <label class="inline">Name (required)</label>
        </div>
      </div>

      <div class="row">
        <div class="four columns">
          <%= f.text_field :email %>
        </div>
        <div class="eight columns">
          <label class="inline">Email (required but unpublished)</label>
        </div>
      </div>

      <div class="row">
        <div class="four columns">
          <%= f.text_field :website %>
        </div>
        <div class="eight columns">
          <label class="inline">Website</label>
        </div>
      </div>

      <%= f.text_area :content %>
      <%= f.submit %>
    <% end %>
  </div>
</div>

<script>
  $(document).ready(function(){

    $('#create-comment-form')
      .bind("ajax:beforeSend", function(evt, xhr, settings){
        var $submitButton = $(this).find('input[name="commit"]');

        // Update the text of the submit button to let the user know stuff is happening.
        // But first, store the original text of the submit button, so it can be restored when the request is finished.
        $submitButton.data( 'origText', $(this).text() );
        $submitButton.text( "Submitting..." );

      })
      .bind("ajax:success", function(evt, data, status, xhr){
        var $form = $(this);

        // Reset fields and any validation errors, so form can be used again, but leave hidden_field values intact.
        $form.find('textarea,input[type="text"],input[type="file"]').val("");
        $form.find('div.validation-error').empty();

        // Insert response partial into page below the form.
        $('#comments').append(xhr.responseText);

      })
      .bind('ajax:complete', function(evt, xhr, status){
        var $submitButton = $(this).find('input[name="commit"]');

        // Restore the original submit button text
        $submitButton.text( $(this).data('origText') );
      })
      .bind("ajax:error", function(evt, xhr, status, error){
        var $form = $(this),
            errors,
            errorText;

        try {
          // Populate errorText with the comment errors
          errors = $.parseJSON(xhr.responseText);
        } catch(err) {
          // If the responseText is not valid JSON (like if a 500 exception was thrown), populate errors with a generic error message.
          errors = {message: "Please reload the page and try again"};
        }

        // Build an unordered list from the list of errors
        errorText = "There were errors with the submission: \n<ul>";

        for ( error in errors ) {
          errorText += "<li>" + error + ': ' + errors[error] + "</li> ";
        }

        errorText += "</ul>";

        // Insert error list into form
        $form.find('div.validation-error').html(errorText);
      });
  });

</script>
